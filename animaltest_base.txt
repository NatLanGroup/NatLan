       // Rules
       
        m/  IM(IM(%1,%2),%2)p=im						// IM reasoning
        m/  IM(NOT(A(%1,%2))p=p1,A(%1,%2))p=pnot1	// NOT reasoning with A
        m/  IM(NOT(F(%1,%2))p=p1,F(%1,%2))p=pnot1	// NOT reasoning with F	
        m/  IM(NOT(P(%1,%2))p=p1,P(%1,%2))p=pnot1	// NOT reasoning with P
       
       // ACTORS : CAN, WANT, GOAL, TOOL
        m/ IM(A(%1, F(%2, can))p=p1, A(%1,%2))p=cando
       // IM(A(%1,%2)p=p1,A(%1,F(%2,can)))p=does  BUG: creates A(animal, F(F(eat,can),can)) etc. Ezt az ismetlest le kell tiltani!! legjobb mentalese-bol.
       // IM(A(%1, F(%2, cannot))p=p1, A(%1,%2))p=cannot
        m/ IM(AND(A(%1,F(%2,can))p=p1,A(%1,F(%2,want))p=p2),A(%1,%2))p=can
        m/ IM(C(A(%1,%2),P(%1,goal))p=p1, A(%1,F(%2,want)))p=pide1
        m/ IM(A(%1,F(%2,want))p=p1, C(A(%1,%2),P(%1,goal)))p=pide1
       // TOOL rules like F(x, R(to, y)) means y is goal, x is tool to achieve goal
       
       //ANIMALS: LIVE, DEAD, MOVE
       
        m/ F(dummy)
        e/  Animals live.							 m/ A(animal,live)
        e/  Dead animals do not live.				 m/ A(F(animal,dead),live)p=0
        e/  An animal not living is dead.			 m/ IM(NOT(A(animal,live)),F(animal,dead))
OK      e/  Do animals live?							 m/  A(animal,live)?				 a/ A(animal,live)p=4 s/ A(animal,live)4 [[20, 4]]
OK      e/  Do dead animals live?					 m/  A(F(animal,dead),live)?		 a/ A(F(animal,dead),live)p=0 s/ A(F(animal,dead),live)0 [[25, 9]]
OK      e/  Does this animal live?					 m/  A(animal.g=0,live)?			 a/ A(animal.g=0,live)p=2 s/ A(animal,live)2 [[28, 28]]
OK      e/  Which animals do not live? 	  			 m/  A(F(animal,?),live)			 a/ A(F(animal,dead),live)p=0 s/ A(F(animal,dead),live)0 [[33, 9]]
       
        e/  Dogs are animals.						 m/ C(dog,animal)
OK      e/  Do dogs live?							 m/  A(dog,live)?					 a/ A(dog,live)p=4 s/ A(dog,live)4 [[46, 40]]
OK      e/  Do dead dogs live?						 m/  A(F(dog,dead),live)?			 a/ A(F(dog,dead),live)p=0 s/ A(F(dog,dead),live)0 [[51, 42]]
       
        e/  Living animals move.						 m/ IM(A(animal,live),A(animal,move))
        e/  Moving animals live.						 m/ IM(A(animal,live),A(animal,move))
        e/  Animals move.							 m/ A(animal,move)
        e/  Dead animals do not move.				 m/ A(F(animal,dead),move)p=0
OK      e/  Do animals move?							 m/  A(animal,move)?				 a/ A(animal,move)p=4 s/ A(animal,move)4 A(animal,move)4 [[77, 59], [77, 69]]
OK      e/  Do dead animals move?					 m/  A(F(animal,dead),move)?		 a/ A(F(animal,dead),move)p=0 s/ A(F(animal,dead),move)0 [[82, 74]]
       
       // ANIMALS: GOAL, GOOD and BAD. Bug if IM relation is in implication!
        m/ IM(C(A(%1,I(avoid,F(%1,%2))),P(%1,goal))p=p1,C(NOT(F(%1,%2)),P(%1,goal)))p=pide1
        m/ IM(AND(C(%2,P(%1,goal))p=p1,IM(%3,%2)p=p2),C(%3,P(%1,goal)))p=pclass
        m/ IM(AND(A(%2,%3)p=p1,XOR(NOT(%1),NOT(A(%2,%3)))p=p2),XOR(%1,A(%2,%3)))p=im
        e/  If something is good for an animal, then the animal`s goal is to achieve it.  	 m/ IM(F(%1,F(good,R(for,animal)))p=p1,C(%1,P(animal,goal)))p=pide1
        e/  If something is bad for an animal, then the animal`s goal is to avoid it.  		 m/ IM(F(%1,F(bad,R(for,animal)))p=p1,C(A(animal,I(avoid,%1)),P(animal,goal)))p=pide1
        e/  To live is good for the animal.			 m/ F(A(animal,live),F(good,R(for,animal)))
        e/  To sleep is good for the animal.			 m/ F(A(animal,sleep),F(good,R(for,animal)))
        e/  Being hungry is bad for the animal.  	 m/ F(F(animal,hungry),F(bad,R(for,animal)))
OK      e/  Is the animal`s goal to live?			 m/  C(A(animal,live),P(animal,goal))?		 a/ C(A(animal,live),P(animal,goal))p=4 s/ C(A(animal,live),P(animal,goal))4 [[141, 94]]
OK      e/  Is the animal`s goal to sleep?			 m/  C(A(animal,sleep),P(animal,goal))?		 a/ C(A(animal,sleep),P(animal,goal))p=4 s/ C(A(animal,sleep),P(animal,goal))4 [[148, 109]]
       
        e/  Animals are often hungry.				 m/ F(animal,hungry)p=3
        e/  Animals are sometimes not hungry.		 m/ NOT(F(animal,hungry))p=3
OK      e/  Is the animal`s goal to avoid being hungry?   m/  C(A(animal,I(avoid,F(animal,hungry))),P(animal,goal))?   a/ C(A(animal,I(avoid,F(animal,hungry))),P(animal,goal))p=4 s/ C(A(animal,I(avoid,F(animal,hungry))),P(animal,goal))4 [[167, 127]]
OK      e/  Does the animal avoid being hungry?		 m/  A(animal,I(avoid,F(animal,hungry)))?      a/ A(animal,I(avoid,F(animal,hungry)))p=2 s/ A(animal,I(avoid,F(animal,hungry)))2 [[174, 163]]
OK      e/  Is the animal`s goal not to be hungry?	 m/  C(NOT(F(animal,hungry)),P(animal,goal))?	 a/ C(NOT(F(animal,hungry)),P(animal,goal))p=4 s/ C(NOT(F(animal,hungry)),P(animal,goal))4 [[182, 134]]
        e/  If an animal eats, it is not hungry. 	 m/ IM(A(animal,eat),NOT(F(animal,hungry)))
       
OK      e/  Is the animal`s goal to eat? 			 m/  C(A(animal,eat),P(animal,goal))?				 a/ C(A(animal,eat),P(animal,goal))p=4 s/ C(A(animal,eat),P(animal,goal))4 [[202, 199]]
       
        e/  Bats are animals.						 m/ C(bat,animal)
        e/  The bat is hungry.						 m/ F(bat,hungry)
OK      e/  Is the bat`s goal to eat? 				 m/  C(A(bat,eat),P(bat,goal))?	 a/ C(A(bat,eat),P(bat,goal))p=4 s/ C(A(bat,eat),P(bat,goal))4 [[223, 222]]
OK      e/  Does the bat eat?						 m/  A(bat,eat)?					 a/ A(bat,eat)p=2 s/ A(bat,eat)2 [[226, 211]]
OK      e/  Is the bat hungry?						 m/  F(bat,hungry)?				 a/ F(bat,hungry)p=4 F(bat,hungry)p=2 s/ F(bat,hungry)4 F(bat,hungry)2 [[248, 208], [248, 248]]
        e/  This bat is dead.						 m/ F(bat.g=0,dead)
***BADP e/  Does this bat live?						 m/  A(bat.g=0,live)?				 a/ A(bat.g=0,live)p=0 s/ A(bat,live)2 [[273, 254]]
OK      e/  Do bats live?							 m/  A(bat,live)?					 a/ A(bat,live)p=4 s/ A(bat,live)4 [[276, 255]]
OK      e/  Is to sleep good for the bat?			 m/  F(A(bat,sleep),F(good,R(for,bat)))?    a/ F(A(bat,sleep),F(good,R(for,bat)))p=4 s/ F(A(bat,sleep),F(good,R(for,bat)))4 [[293, 289]]
OK      e/  Is the dog hungry?						 m/  F(dog,hungry)?				 a/ F(dog,hungry)p=3 F(dog,hungry)p=2 s/ F(dog,hungry)3 F(dog,hungry)2 [[325, 310], [325, 320]]
OK      e/  Does the dog eat?						 m/  A(dog,eat)?					 a/ A(dog,eat)p=2 s/ A(dog,eat)2 [[328, 328]]
       
       // ANIMALS : CAN, CANNOT, WANT, HUNGRY, EAT, FOOD, HUNT
       // with IM we have a bug, test it with XOR:
        m/ XOR(NOT(F(animal,hungry)),NOT(A(animal,F(eat,want))))
        m/ IM(A(%1,F(%2,cannot))p=p1,A(%1,F(%2,can)))p=pnot1
        e/  If an animal is hungry, it wants to eat.  		 m/ IM(F(animal,hungry),A(animal,F(eat,want)))
        e/  If an animal is not hungry, it doesn`t want to eat.   m/ IM(NOT(F(animal,hungry)),NOT(A(animal,F(eat,want))))
        e/  If an animal has food, it can eat.				 m/ A(animal,F(eat,can))p=2
        e/  If an animal has food, it can eat.				 m/ IM(P(animal,food),A(animal,F(eat,can)))
        e/  If an animal has no food, it cannot eat.  		 m/ IM(NOT(P(animal,food)),A(animal,F(eat,cannot)))
        e/  If an animal finds food, it has food.  			 m/ IM(A(animal,I(find,food)),P(animal,food))
        e/  If an animal doesn`t find food, it has no food.   m/ IM(NOT(A(animal,I(find,food))),NOT(P(animal,food)))
        e/  If an animal doesn`t hunt, it has no food.		 m/ IM(NOT(A(animal,hunt)),NOT(P(animal,food)))
        e/  If an animal eats, it usually eats food.			 m/ IM(A(animal,eat),A(animal,I(eat,food)))
        e/  The fox is an animal.							 m/ C(fox,animal)
OK      e/  Does the fox want to eat?						 m/  A(fox,F(eat,want))?								 a/ A(fox,F(eat,want))p=3 A(fox,F(eat,want))p=2 s/ A(fox,F(eat,want))3 A(fox,F(eat,want))2 [[519, 452], [519, 489]]
OK      e/  Is the fox hungry?								 m/  F(fox,hungry)?									 a/ F(fox,hungry)p=3 F(fox,hungry)p=2 s/ F(fox,hungry)3 F(fox,hungry)2 [[542, 536], [542, 542]]
OK      e/  Is the goal of the fox to eat?					 m/  C(A(fox,eat),P(fox,goal))?						 a/ C(A(fox,eat),P(fox,goal))p=3 C(A(fox,eat),P(fox,goal))p=2 s/ C(A(fox,eat),P(fox,goal))3 C(A(fox,eat),P(fox,goal))2 C(A(fox,eat),P(fox,goal))3 [[549, 455], [549, 493], [549, 509]]
OK      e/  Does the fox want to eat if it is hungry?		 m/  IM(F(fox,hungry),A(fox,F(eat,want)))?    		 a/ IM(F(fox,hungry),A(fox,F(eat,want)))p=4 s/ IM(F(fox,hungry),A(fox,F(eat,want)))4 [[558, 451]]
OK      e/  Does the fox want to eat if it is not hungry?	 m/  IM(NOT(F(fox,hungry)),NOT(A(fox,F(eat,want))))?   a/ IM(NOT(F(fox,hungry)),NOT(A(fox,F(eat,want))))p=4 s/ IM(NOT(F(fox,hungry)),NOT(A(fox,F(eat,want))))4 [[569, 463]]
OK      e/  Does the fox eat?								 m/  A(fox,eat)?										 a/ A(fox,eat)p=2 s/ A(fox,eat)2 [[572, 545]]
        e/  The fox doesn`t find food.						* m/ NOT(A(fox,I(find,food)))
***BADP e/  Does the fox eat?								 m/  A(fox,eat)?										 a/ A(fox,eat)p=1 s/ A(fox,eat)0 [[593, 588]]
        e/  The fox has food.								* m/ P(fox,food)
        e/  The fox is hungry. 								* m/ F(fox,hungry)
***BADP e/  Does the fox eat?								 m/  A(fox,eat)?										 a/ A(fox,eat)p=3 s/ A(fox,eat)0 A(fox,eat)1 [[606, 588], [606, 598]]
       
       // MODALITY LIST: ABLE CAN COULD DARE HAS TO MAY MIGHT MUST NEED SHALL SHOULD WOULD WILL NOT PERMIT PROMISE ADVISE ASK FORBID OFFER OBLIGATED POSSIBLE 
       
       // ACTIONS: CONTACT ACTIONS, TOUCH, HAVE
        m/ C(eat, contact_action)
        m/ IM(AND(C(%1,contact_action)p=p1,NOT(A(%2,I(F(touch,can),%3)))p=p2), NOT(A(%2,I(F(%1,can),%3))))p=im
       // IM(A(%1,I(have,%2))p=p1,A(%1,I(F(touch,can),%2)))p=[2,2,2,3,3] we need this new table
       
       
       
       
       // ANIMALS: GOOD things, USEFUL, HELP, PROTECT
       
       // ANIMALS: BAD things, DIE, THREATEN 
       
       // ANIMALS: INTENTIONAL MOVEMENT
       
       // ANIMALS: FAMILY, OFFSPRING
       
       // BIRDS: EGGS, WINGS, FLY
