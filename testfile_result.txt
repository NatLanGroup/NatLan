       // Rules

        /m IM(AND(D(%1,%2)p=p0,C(%2,%3)p=p1),C(%1,%3))p=pclass
        /m IM(AND(D(%1,%2)p=p0,A(%2,%3)p=p1),A(%1,%3))p=pclass
        /m IM(D(%1,%2)p=p0,D(%2,%1))p=pide1
        /m IM(D(%1,%2)p=p0,C(%1,%2))p=pide1
        /m IM(AND(D(%1,%2)p=p0,D(%2,%3)p=p1),D(%1,%3))p=pide2
        /m IM(AND(C(%1,%2)p=p0,C(%2,%3)p=p1),C(%1,%3))p=pclass
        /m IM(AND(C(%1,%2)p=p0,A(%2,%3)p=p1),A(%1,%3))p=pclass
        /m  IM(AND(C(%1,%2)p=p0,F(%2,%3)p=p1),F(%1,%3))p=pclass    // this replaces the python code for C-reasoning. This uses a (p1,p2)->pc grid to calculate p.

        /m IM(AND(F(%1,%2)p=p0,A(%1,%3)p=p1),A(F(%1,%2),%3))p=pclass
        /m  IM(AND(XOR(%1,%2)p=p0,F(%1,%3)p=p1),F(%2,%3))p=pxor	  // XOR reasoning

        /m  IM(A(AND(%1,%2),%3)p=p0,A(%1,%2))p=pide1				  // AND reasoning

       // does not work: IM(AND(C(%1,%2)p=p0,IM(F(%2,%3),A(%2,%4))p=p1),IM(F(%1,%3),A(%1,%4)))p=pclass    

        /m  IM(IM(%1,%2),%2)p=im									  // IM reasoning

       // IM(N(%1,%2P1)p2,%1)p=cond			 reasoning rule for N relation - necessary condition.

        /m IM(C(%1,F(%2,%3))p=p0,C(%1,%2))p=pide1
        /m IM(C(%1,F(%2,strange))p=p0,C(%1,%2))p=idedegrade
       //below examples show that we need a built-in C and D substitution reasoning:

        /m  IM(AND(C(%1,%2)p=p0,A(F(%3,%2),%4)p=p1),A(F(%3,%1),%4))p=pclass   //does not work because Multiconcept does not yet use build_concept

       // IM(AND(C(%1,%2)p=p0,IM(F(%2,%3),A(%2,%4))p=p1),IM(F(%1,%3),A(%1,%4)))p=pclass will work for Ike.

       
        /m F(dummy)
        /e  A garden is a place.               /m C(garden,place)
        /e  Blue whales are mammals.			  /m C(mammal, F(whale,blue))
OK      /e  Are whales mammals?				  /m  C(mammal, whale)?		 /a C(mammal,whale)p=4 /s C(mammal,whale)4 [[13, 10]]
        /e  Penguins are strange birds.		  /m C(penguin, F(bird,strange))
OK      /e  Are penguins birds?				  /m  C(penguin,bird)?		 /a C(penguin,bird)p=3 /s C(penguin,bird)3 C(penguin,bird)3 [[23, 19], [23, 20]]
        /e  Animals live.					  /m A(animal,live)
        /e  Dead animals do not live.		  /m A(F(animal,dead),live)p=0
        /e  An animal not living is dead.	  /m IM(NOT(A(animal,live)),F(animal,dead))
        /e  Dead animals do not live anymore.  /m AND(A(F(animal,dead),F(live,T(now))p=0),A(animal,F(live,T(before))))
OK MORE /e  Do animals live? Yes.			  /m  A(animal,live)?			 /a A(animal,live)p=4 /s A(animal,live)4 A(animal,live)2 [[57, 26], [57, 34]]
OK      /e  Do dead animals live? No.		  /m  A(F(animal,dead),live)?	 /a A(F(animal,dead),live)p=0 /s A(F(animal,dead),live)0.0 [[62, 31]]
        /e  Dogs are animals.                  /m C(dog,animal)
OK MORE /e  Do dogs live?					  /m  A(dog,live)?			 /a A(dog,live)p=4 /s A(dog,live)4 A(dog,live)2 [[78, 66], [78, 69]]
OK      /e  Do dead dogs live?				  /m  A(F(dog,dead),live)?	 /a A(F(dog,dead),live)p=0 /s A(F(dog,dead),live)0.0 [[83, 68]]
       
        /e  Persons are the same as people.    /m D(person,people)
        /e  Animals are not people.            /m C(animal,people)p=0
        /e  People are not animals.            /m C(people,animal)p=0
OK      /e  What is a garden?                  /m  C(garden,?)               /a C(garden,place)p=4 /s C(garden,place)4 [[98, 4]]
OK      /e  What is a place?                   /m  C(place,?)                /a not found:C(place,?) /s 
OK      /e  What is a toy?                     /m  C(toy,?)                  /a not found:C(toy,?) /s 
OK MORE /e  What is a person?                  /m  C(person,?)               /a not found:C(person,?) /s C(person,people)4 C(person,animal)0.0 [[98, 88], [98, 98]]
OK      /e  Who are persons?                   /m  D(person,?)               /a D(person,people)p=4 /s D(person,people)4 [[98, 86]]
OK MORE /e  Who are people?                    /m  D(people,?)               /a not found:D(people,?) /s D(people,person)4 [[98, 87]]
OK      /e  Is the garden a place?             /m  C(garden,place)?          /a C(garden,place)p=4 /s C(garden,place)4 [[101, 4]]
OK      /e  Is the place a garden?             /m  C(place,garden)?          /a C(place,garden)p=2 /s C(place,garden)2 [[104, 104]]
OK      /e  Are toys dogs?                     /m  C(toy,dog)?               /a C(toy,dog)p=2 /s C(toy,dog)2 [[107, 107]]
OK      /e  Are people same as persons?        /m  D(people,person)?         /a D(people,person)p=4 /s D(people,person)4 [[110, 87]]
OK      /e  Are persons same as people?        /m  D(person,people)?         /a D(person,people)p=4 /s D(person,people)4 [[113, 86]]
OK      /e  Are people animals?                /m  C(people,animal)?         /a C(people,animal)p=0 /s C(people,animal)0.0 [[116, 97]]
OK MORE /e  What are people?                   /m  C(people,?)               /a C(people,animal)p=0 /s C(people,person)4 C(people,animal)0.0 C(people,animal)2 [[116, 89], [116, 97], [116, 116]]
OK MORE /e  What are animals?                  /m  C(animal,?)               /a not found:C(animal,?) /s C(animal,people)0.0 [[116, 92]]
OK MORE /e  What animals are there?            /m  C(?,animal)               /a C(people,animal)p=0 C(dog,animal)p=4 /s C(dog,animal)4 C(people,animal)0.0 C(person,animal)0.0 C(people,animal)2 [[116, 65], [116, 97], [116, 98], [116, 116]]
        /e  People walk.                       /m A(people,walk)
        /e  People talk.                       /m A(people,talk)
        /e  Animals don`t talk.				  /m A(animal,talk)p=0
OK      /e  What do people do?                 /m  A(people,?)               /a A(people,walk)p=4 A(people,talk)p=4 /s A(people,walk)4 A(people,talk)4 [[128, 119], [128, 123]]
OK MORE /e  Who walks?                         /m  A(?,walk)                 /a A(people,walk)p=4 /s A(people,walk)4 A(person,walk)4 [[128, 119], [128, 120]]
OK      /e  Do people walk?                    /m  A(people,walk)?           /a A(people,walk)p=4 /s A(people,walk)4 [[131, 119]]
OK      /e  Do people sing?                    /m  A(people,sing)?           /a A(people,sing)p=2 /s A(people,sing)2 [[134, 134]]
OK MORE /e  What do dogs do?                   /m  A(dog,?)                  /a not found:A(dog,?) /s A(dog,live)4 A(dog,live)2 A(dog,F(live,T(before)))2 A(dog,live)2 A(dog,talk)0.0 [[134, 66], [134, 69], [134, 74], [134, 78], [134, 128]]
        /e  Dogs are not the same as people.   /m D(dog,people)p=0
OK      /e  Do dogs walk?                      /m  A(dog,walk)?              /a A(dog,walk)p=2 /s A(dog,walk)2 [[146, 146]]
        /e  Tired dogs walk slowly.            /m F(A(F(dog,tired),walk),slowly)
OK      /e  How do tired dogs walk?            /m  F(A(F(dog,tired),walk),?)        /a F(A(F(dog,tired),walk),slowly)p=1 /s F(A(F(dog,tired),walk),slowly)4 [[153, 153]]
OK      /e  Do tired dogs walk slowly?         /m  F(A(F(dog,tired),walk),slowly)?  /a F(A(F(dog,tired),walk),slowly)p=1 /s F(A(F(dog,tired),walk),slowly)4 [[160, 153]]
OK MORE /e  What dogs walk slowly?             /m  F(A(F(dog,?),walk),slowly)       /a F(A(F(dog,tired),walk),slowly)p=1 /s F(A(F(dog,tired),walk),slowly)4 F(A(F(dog,tired),walk),slowly)2 [[160, 153], [160, 160]]
OK MORE /e  What do tired dogs do slowly?      /m  F(A(F(dog,tired),?),slowly)      /a F(A(F(dog,tired),walk),slowly)p=1 /s F(A(F(dog,tired),walk),slowly)4 F(A(F(dog,tired),walk),slowly)2 [[160, 153], [160, 160]]
        /e  Joe is a person.				 	  /m C(Joe,person)
        /e  A garden is not a person.		  /m C(garden,person)p=0
       
       // MAPPING. r=4 concept is mapping rule. row without mentalese is paragraph break. Mapping happens within paragraph.

        /e  He may mean a boy. 			 /m D(he,boy)p=0.5
        /e  She in general may mean a girl.	 /m D(F(she,R(in,general)),girl)p=0.5
        /e  He does not mean a girl.		 /m D(he,girl)p=0
        /e  She does not mean a boy.		 /m D(she,boy)p=0
        /e  He must always be identified with a person.   /m C(he,person)r=4
        /e  She must always be identified with a person.  /m C(she,person)r=4
       //paragraph start

        /e  Joe is reading.				 /m A(Joe.g=0,read)
        /e  Joe is in the garden.		 /m F(Joe.g=0,R(in,garden))
        /e  He is strong.				 /m F(he.g=0,strong)
OK MORE /e  What is Joe like?			 /m  F(Joe.g=0,?)			 /a F(Joe,strong)p=4 F(Joe.g=0,R(in,garden))p=4 /s F(Joe,R(in,garden))4 F(Joe,R(in,garden))2 F(Joe,strong)4 F(Joe,strong)2 F(Joe,strong)2 F(Joe,strong)2 F(Joe,strong)4 F(Joe,R(in,garden))2 F(Joe,R(in,garden))2 [[283, 202], [283, 203], [283, 240], [283, 273], [283, 275], [283, 277], [283, 279], [283, 280], [283, 282]]
OK      /e  Is he reading?				 /m  A(he.g=0, read)?		 /a A(he,read)p=4 /s A(he,read)4 [[377, 308]]
OK MORE /e  What is Joe?					 /m  C(Joe.g=0,?)			 /a C(Joe,person)p=4 /s C(Joe,person)4 C(Joe,people)4 C(Joe,animal)0.0 C(Joe,dog)0.0 C(Joe,he)4 C(Joe,he)4 [[377, 241], [377, 243], [377, 245], [377, 255], [377, 263], [377, 363]]
       
       
       // D-reasoning

       
OK MORE /e  Who are people?                    /m  D(people,?)               /a D(people,person)p=4 /s D(people,person)4 D(people,person)2 D(people,dog)0.0 D(people,dog)0.0 [[377, 87], [377, 110], [377, 138], [377, 143]]
OK MORE /e  Are people same as persons?        /m  D(people,person)?         /a D(people,person)p=4 /s D(people,person)4 D(people,person)2 [[380, 87], [380, 110]]
OK      /e  Do persons walk?                   /m  A(person,walk)?           /a A(person,walk)p=4 /s A(person,walk)4 [[383, 120]]
OK      /e  Are persons animals?               /m  C(person,animal)?         /a C(person,animal)p=0 /s C(person,animal)0.0 [[386, 98]]
       
       // generating C from D

OK MORE /e  What are people?                   /m  C(people,?)               /a C(people,animal)p=0 C(people,person)p=4 /s C(people,person)4 C(people,animal)0.0 C(people,animal)2 C(people,dog)0.0 [[386, 89], [386, 97], [386, 116], [386, 139]]
OK MORE /e  What are persons?                  /m  C(person,?)               /a C(person,animal)p=0 C(person,people)p=4 /s C(person,people)4 C(person,animal)0.0 C(person,dog)0.0 C(person,animal)2 [[386, 88], [386, 98], [386, 141], [386, 386]]
       
       // C-reasoning. In the fox example we see an implicit C relation.

       
        /e  Animals move.                      /m A(animal,move)
OK MORE /e  What do dogs do?                   /m  A(dog,?)                  /a A(dog,move)p=4 /s A(dog,live)4 A(dog,live)2 A(dog,F(live,T(before)))2 A(dog,live)2 A(dog,talk)0.0 A(dog,walk)2 A(dog,move)4 [[390, 66], [390, 69], [390, 74], [390, 78], [390, 128], [390, 146], [390, 390]]
OK      /e  What moves?                        /m  A(?,move)                 /a A(animal,move)p=4 A(dog,move)p=4 /s A(animal,move)4 A(dog,move)4 [[390, 389], [390, 390]]
OK      /e  Do dogs move?                      /m  A(dog,move)?              /a A(dog,move)p=4 /s A(dog,move)4 [[393, 390]]
OK      /e  Do dogs walk?                      /m  A(dog,walk)?              /a A(dog,walk)p=2 /s A(dog,walk)2 [[396, 146]]
        /e  Joe is a person.                   /m C(Joe,person)
        /e  Mary is a girl.                    /m C(Mary,girl)
OK      /e  Does Joe walk?                     /m  A(Joe,walk)?              /a A(Joe,walk)p=4 /s A(Joe,walk)4 [[406, 166]]
OK      /e  Does Mary walk?                    /m  A(Mary,walk)?             /a A(Mary,walk)p=2 /s A(Mary,walk)2 [[409, 409]]
        /e  Girls are people. 		     	 /m C(girl,people)
        /e  Boys are people.		     		 /m C(boy,people)
        /m F(fox,brown)
OK      /e  Does Mary walk?                    /m  A(Mary,walk)?             /a  A(Mary,walk)p=2 A(Mary,walk)p=4   /s //bad eval code
A(Mary,walk)2 A(Mary,walk)4 [[437, 409], [437, 421]]
        /e  The fox hunts in the forest.       /m F(A(fox,hunt),R(in,forest))
OK      /e  Does the brown fox hunt?           /m  A(F(fox,brown),hunt)?     /a A(F(fox,brown),hunt)p=2 /s A(F(fox,brown),hunt)2 [[449, 449]]
       
       // IM-reasoning

        /e  If a person runs, then that person moves.  /m IM(A(person,run),A(person,move))
OK      /e  Does a person run?                 /m  A(person,run)?            /a A(person,run)p=2 /s A(person,run)2 A(person,run)2 [[468, 452], [468, 460]]
OK      /e  Does a person move?                /m  A(person,move)?           /a A(person,move)p=2 /s A(person,move)2 A(person,move)2 [[471, 455], [471, 464]]
OK MORE /e  Who moves?                         /m  A(?,move)                 /a  A(person,move)p=2    /s //bad eval code
A(animal,move)4 A(dog,move)4 A(dog,move)2 A(person,move)2 A(people,move)2 A(person,move)2 A(person,move)2 [[471, 389], [471, 390], [471, 393], [471, 455], [471, 458], [471, 464], [471, 471]]
        /e  People run.                        /m A(people,run)
OK MORE /e  Who moves?                         /m  A(?,move)                 /a A(person,move)p=4 /s A(animal,move)4 A(dog,move)4 A(dog,move)2 A(person,move)2 A(people,move)2 A(person,move)2 A(person,move)2 A(people,move)4 A(person,move)4 A(Joe,move)4 A(he,move)4 A(Joe,move)4 A(he,move)4 A(girl,move)4 A(Mary,move)4 A(boy,move)4 A(F(he,strong),move)4 A(F(he,R(in,garden)),move)4 A(F(Joe,R(in,garden)),move)4 A(F(Joe,strong),move)4 A(F(he,R(in,garden)),move)4 A(F(he,strong),move)4 [[515, 389], [515, 390], [515, 393], [515, 455], [515, 458], [515, 464], [515, 471], [515, 483], [515, 484], [515, 497], [515, 498], [515, 499], [515, 500], [515, 501], [515, 502], [515, 503], [515, 505], [515, 507], [515, 509], [515, 511], [515, 513], [515, 515]]
OK      /e  Do animals walk?                   /m  A(animal,walk)?           /a A(animal,walk)p=2 /s A(animal,walk)2 [[518, 518]]
        /e  If animals are people, then animals walk.   /m IM(C(animal,people),A(animal,walk))
OK      /e  Are animals people?                /m  C(animal,people)?         /a C(animal,people)p=0 /s C(animal,people)0.0 C(animal,people)0.0 [[533, 92], [533, 521]]
OK      /e  Do animals walk?                   /m  A(animal,walk)?           /a A(animal,walk)p=2 /s A(animal,walk)2 A(animal,walk)2 [[536, 518], [536, 524]]
        /e  Peter is hungry.					  /m F(Peter, hungry)
        /e  If Peter is hungry, Peter eats.	  /m IM(F(Peter,hungry),A(Peter,eat))
***BADP /e  Does Peter eat?					  /m  A(Peter,eat)?			 /a A(Peter,eat)p=4 /s A(Peter,eat)2 [[549, 545]]
        /e  If Pete is hungry, Pete eats.	  /m IM(F(Pete,hungry),A(Pete,eat))
OK      /e  Does Pete eat?					  /m  A(Pete,eat)?			 /a A(Pete,eat)p=2 /s A(Pete,eat)2 [[559, 555]]
        /e  Pete is hungry.					  /m  F(Pete.g=0, hungry)		// Pete.g=0 means a specific Pete. Mapping needed to conclude.

OK      /e  Does Pete eat?					  /m  A(Pete,eat)?			 /a A(Pete,eat)p=2 /s A(Pete,eat)2 A(Pete,eat)2 [[565, 555], [565, 559]]
        /e  Ike is a person.					  /m C(Ike,person)
        /e  Ike is hungry.					  /m F(Ike,hungry)
        /e  If a person is hungry, that person eats.	  /m IM(F(person,hungry),A(person,eat))
***BADP /e  Does Ike eat?					  /m  A(Ike,eat)?				 /a A(Ike,eat)p=4 /s A(Ike,eat)2 [[609, 609]]
        /e  Joe sits.                          /m A(Joe,sit)
        /e  If people sit, then people do not move.   /m IM(A(people,sit),NOT(A(people,move)))
OK      /e  Do people sit?                     /m  A(people,sit)?            /a A(people,sit)p=2 /s A(people,sit)2 A(people,sit)2 [[635, 615], [635, 625]]
OK      /e  Does Joe sit?                      /m  A(Joe,sit)?               /a A(Joe,sit)p=4 /s A(Joe,sit)4 A(Joe,sit)4 [[638, 612], [638, 628]]
***BADP /e  Does Joe move?                     /m  A(Joe,move)?              /a A(Joe,move)p=0 /s A(Joe,move)4 [[641, 497]]
        /e  If a person does not move, then the person stays.    /m IM(NOT(A(person,move)),A(person,stay))
***BADP /e  Does Joe stay?                     /m  A(Joe,stay)?              /a A(Joe,stay)p=4 /s A(Joe,stay)2 [[664, 664]]
       
       // AND-reasoning

        /e  Mary and Joe walk.                 /m A(AND(Mary,Joe),walk)
OK MORE /e  Does Mary walk?                    /m  A(Mary,walk)?             /a A(Mary,walk)p=1 /s A(Mary,walk)2 A(Mary,walk)4 A(Mary,walk)2 [[673, 409], [673, 421], [673, 437]]
        /e  Mary plays.                        /m A(Mary,play)
        /e  Joe plays.                         /m A(Joe,play)
***BADP /e  Do Mary and Joe play?              /m  A(AND(Mary,Joe),play)?    /a A(AND(Mary,Joe),play)p=1 /s A(AND(Mary,Joe),play)2 [[684, 684]]
***BADP /e  What does Joe do?                  /m  A(Joe,?)                  /a A(Joe,walk)p=1 A(Joe,talk)p=1 A(Joe,play)p=1 A(Joe,run)p=0.5 A(Joe,move)p=0.5 A(Joe,sit)p=1 /s A(Joe,walk)4 A(Joe,talk)4 A(Joe,walk)2 A(Joe,run)2 A(Joe,run)4 A(Joe,move)4 A(Joe,sit)4 A(Joe,sit)4 A(Joe,sit)2 A(Joe,move)2 A(Joe,move)2 A(Joe,stay)2 A(Joe,play)4 [[684, 166], [684, 167], [684, 406], [684, 462], [684, 476], [684, 497], [684, 612], [684, 628], [684, 638], [684, 641], [684, 657], [684, 664], [684, 679]]
***BADP /e  Does Joe sit and play?             /m  A(Joe,AND(sit,play))?     /a A(Joe,AND(sit,play))p=1 /s A(Joe,AND(sit,play))2 [[689, 689]]
***BADP /e  Does Joe run?                      /m  A(Joe,run)?               /a A(Joe,run)p=0.5 /s A(Joe,run)2 A(Joe,run)4 [[692, 462], [692, 476]]
OK      /e  Does Joe run and sit?              /m  A(Joe,AND(run,sit))?      /a A(Joe,AND(run,sit))p=0.5 /s A(Joe,AND(run,sit))2 [[697, 697]]
       
       
       
       
       
       // %-reasoning

       
        /e  If %1 consists of %2, then %2 is part of %1.    // error because table missing: IM(F(A(%1,consist),R(of,%2)),P(%2,%1))

        /e  The family consists of father, mother and Joe.   /m F(A(family,consist),R(of,AND(father,mother,Joe))
***BADP /e  Is Joe part of the family?         /m  P(Joe,family)?            /a P(Joe,family)p=1 /s P(Joe,family)2 [[709, 709]]
OK      /e  Is Mary part of the family?        /m  P(Mary,family)?           /a P(Mary,family)p=0.5 /s P(Mary,family)2 [[712, 712]]
       
       // Features

        /e  Foxes are animals.                 /m C(fox,animal)
        /e  The fox is red.                    /m F(fox,red)
        /e  The fox is white.                  /m F(fox,white)
        /e  The fox is smart.                  /m F(fox,smart)
        /e  The fox hunts in the forest.       /m F(A(fox,hunt),R(in,forest))
        /e  The fox hunts in the forest at dawn.   /m F(A(fox,hunt),R(in,forest),R(at,dawn))
OK MORE /e  What are foxes like?               /m  F(fox,?)                  /a F(fox,red)p=1 F(fox,white)p=1 F(fox,smart)p=1 /s F(fox,brown)4 F(fox,brown)2 F(fox,dead)2 F(fox,dead)2 F(fox,brown)2 F(fox,brown)2 F(fox,brown)2 F(fox,red)4 F(fox,red)2 F(fox,red)2 F(fox,red)2 F(fox,white)4 F(fox,white)2 F(fox,white)2 F(fox,white)2 F(fox,smart)4 F(fox,smart)2 F(fox,smart)2 F(fox,smart)2 [[783, 434], [783, 447], [783, 717], [783, 722], [783, 732], [783, 734], [783, 736], [783, 742], [783, 743], [783, 745], [783, 747], [783, 751], [783, 752], [783, 754], [783, 756], [783, 760], [783, 761], [783, 763], [783, 765]]
***MISS /e  How do foxes hunt?                 /m  F(A(fox,hunt),?)          /a F(A(fox,hunt),R(in,forest),R(at,dawn))p=1 /s F(A(fox,hunt),R(in,forest))4 F(A(fox,hunt),R(in,forest))4 [[783, 444], [783, 773]]
OK      /e  Where do foxes hunt?               /m  F(A(fox,hunt),R(in,?))    /a F(A(fox,hunt),R(in,forest))p=1 /s F(A(fox,hunt),R(in,forest))4 F(A(fox,hunt),R(in,forest))4 [[783, 444], [783, 773]]
OK      /e  When do foxes hunt?                /m  F(A(fox,hunt),T(?))       /a not found:F(A(fox,hunt),T(?)) /s 
       
       //C-reasoning for feature

***BADP /e  Does the Red Fox hunt?             /m  A(F(fox,red),hunt)?       /a A(F(fox,red),hunt)p=1 /s A(F(fox,red),hunt)2 [[788, 788]]
***BADP /e  Does the brown fox hunt?           /m  A(F(fox,brown),hunt)?     /a  A(F(fox,brown),hunt)p=1      /s //although F(fox,brown)p=0.5
A(F(fox,brown),hunt)2 [[793, 449]]
       
       
       // XOR-reasoning Understanding exclusive features and any kind of exclusive concepts

***BADP /e  Does Joe run?                      /m  A(Joe,run)?               /a A(Joe,run)p=0.5 /s A(Joe,run)2 A(Joe,run)4 A(Joe,run)2 [[796, 462], [796, 476], [796, 692]]
        /e  People either sit or run.          /m A(people,XOR(sit,run))
***BADP /e  Does Joe run?                      /m  A(Joe,run)?               /a A(Joe,run)p=0 /s A(Joe,run)2 A(Joe,run)4 A(Joe,run)2 A(Joe,run)2 [[827, 462], [827, 476], [827, 692], [827, 796]]
        /e  The fox is either red or white.    /m  F(fox,XOR(red,white))    // this is contradiction, not yet understood

OK MORE /e  Is the fox red?                    /m  F(fox,red)?               /a F(fox,red)p=1 /s F(fox,red)4 F(fox,red)2 F(fox,red)2 F(fox,red)2 F(fox,red)2 [[841, 742], [841, 743], [841, 745], [841, 747], [841, 786]]
OK MORE /e  Is the fox white?                  /m  F(fox,white)?             /a F(fox,white)p=1 /s F(fox,white)4 F(fox,white)2 F(fox,white)2 F(fox,white)2 [[844, 751], [844, 752], [844, 754], [844, 756]]
       
       
       // understanding dimensions

        /e  Every object has a shape.          /m P(shape,object)
        /e  The shape of an object can be a circle, a trianlge, a square, a sphere, or a cube.  /m C(P(shape,object),XOR(circle,triangle,square,sphere,cube))
        /e  The color of a toy can be either red, green, blue, or yellow.       /m F(P(color,toy),XOR(red,green,blue,yellow))
        /e  The button is an object.           /m C(button,object)
        /e  The button`s shape is a circle.    /m C(P(shape,button),circle)
OK MORE /e  What shape is the button?          /m  C(P(shape,button),?)           /a C(P(shape,button),circle)p=1 /s C(P(shape,button),XOR(circle,triangle,square,sphere,cube))4 C(P(shape,button),circle)4 [[877, 872], [877, 877]]
OK      /e  Is the button`s shape a circle?    /m  C(P(shape,button),circle)?     /a C(P(shape,button),circle)p=1 /s C(P(shape,button),circle)4 [[882, 877]]
***BADP /e  Is the button`s shape a cube?      /m  C(P(shape,button),cube)?       /a C(P(shape,button),cube)p=0 /s C(P(shape,button),cube)2 [[887, 887]]
OK      /e  Is the button a circle?            /m  C(button,circle)?              /a C(button,circle)p=0.5 /s C(button,circle)2 [[890, 890]]
        /e  Shape is a feature.                /m C(shape,feature)
        /e  Shape is a dimension.              /m C(shape,dimension)
        /e  If %1 is a dimension and %2`s %1 is %3, then %2 is %3.  // IM(AND(C(%1,dimension),F(P(%1,%2),%3)),F(%2,%3))

***BADP /e  Is the button a circle?            /m  C(button,circle)?              /a C(button,circle)p=1 /s C(button,circle)2 [[899, 890]]
        /e  Color is a feature.                /m C(color,feature)
        /e  The toy`s color is red.            /m F(P(color,toy),red)
***BADP /e  Is the toy`s color green?          /m  F(P(color,toy),green)?         /a F(P(color,toy),green)p=0 /s F(P(color,toy),green)2 [[912, 912]]
***BADP /e  Is the toy yellow?                 /m  F(toy,yellow)?                 /a F(toy,yellow)p=0 /s F(toy,yellow)2 [[915, 915]]
       
       
       // Implicit C-reasoning for features

        /e  Bob is a nice person.              /m C(bob,F(person,nice))
OK      /e  Does Bob talk?                     /m  A(bob,talk)?                   /a A(bob,talk)p=1 /s A(bob,talk)4 [[957, 925]]
        /e  Girls are people.                  /m C(girl,people)
***BADP /e  Do little girls talk?              /m  A(F(girl,little),talk)?        /a A(F(girl,little),talk)p=1 /s A(F(girl,little),talk)2 [[965, 965]]
       
       
       // Split word meaning using XOR reasoning

OK      /e  Are flies animals?                 /m  C(fly,animal)?                 /a C(fly,animal)p=0.5 /s C(fly,animal)2 [[968, 968]]
        /e  Fly means either a kind of move or a kind of animal.     /m XOR(C(fly,move),C(fly,animal))
       // XOR-reasoning generates two meanings for fl 1:move 2:animal and creates the C-concepts

***BADP /e  Is fly a kind of move?             /m  C(fly,move)?                   /a C(fly,move)p=1 /s C(fly,move)2 [[978, 971]]
***BADP /e  Are flies animals?                 /m  C(fly,animal)?                 /a  C(fly,animal)p=0      /s // XOR reasoning generates this!!
C(fly,animal)2 C(fly,animal)2 [[981, 968], [981, 974]]
        /e  Birds fly.                         /m  A(bird,fly)                   // this concept will have the first meaning of fly as parent

***BADP /e  Do birds move?                     /m  A(bird,move)?                  /a  A(bird,move)p=1       /s // because it takes fly first meaning, move
A(bird,move)2 [[988, 988]]
       
       
       // C-reasoning to detect disjunct classes - not necessary for this specific example

       // If two classes have no (very few) common members then they are disjunct

***BADP /e  Are flies animals?                 /m  C(fly,animal)?                 /a  C(fly,animal)p=0     /s // 'move' and 'animal' classes are disjunct
C(fly,animal)2 C(fly,animal)2 C(fly,animal)2 [[991, 968], [991, 974], [991, 981]]
       // the system could reason that XOR(C(%1,move)p=1,C(%1,animal)p=1)

       
       
       // split the meaning of "the" using XOR reasoning

        /e  The fox is big.                    /m F(Q(the,fox),big)
OK      /e  Is the fox big?                    /m  F(Q(the,fox),big)?             /a F(Q(the,fox),big)p=1 /s F(Q(the,fox),big)4 [[1001, 996]]
OK      /e  Are foxes big?                     /m  F(fox,big)?                    /a  F(fox,big)p=0.5        /s //what we know about "the fox" is not known about "fox"
F(fox,big)2 [[1004, 1004]]
        /e  The %1 is either the same as %1, or is a kind of %1.    // XOR(D(Q(the,%1),%1)p=1,C(Q(the,%1),%1)p=1)

       // XOR-reasoning generates two meanings of "the" and creates the D and C concepts

        /e  The fox is big.                    /m  F(Q(the,fox),big)                                      // F(fox,big) is now generated as we take the1

***BADP /e  Are foxes big?                     /m  F(fox,big)?                    /a  F(fox,big)p=1          /s // we take meaning 1 and use D(Q(the,%1),%1)p=1
F(fox,big)2 [[1012, 1004]]
       
       
       // Word sense disambiguation using assumption branches and likelihood.

        /e  Foxes are either big or small.     /m F(fox,XOR(big,small))
        /e  The fox is small.                  /m  F(Q(the,fox),small)                                    //the2, "special" is taken as we now F(fox,big)

***BADP /e  Are foxes small?                   /m  F(fox,small)?                  /a  F(fox,small)p=0        /s //the2 was taken so the answer is no
F(fox,small)2 [[1031, 1031]]
***BADP /e  Are flies people?                  /m  C(fly,people)?                 /a C(fly,people)p=0 /s C(fly,people)2 [[1034, 1034]]
       // two assumptions are taken for 'fly' meaning. In 1 we generate C(fly,move), in 2 we generate C(fly,animal)p=1 and C(fly,people)p=0.

***BADP /e  What are flies?                    /m  C(fly,?)                       /a  C(fly,move)p=1         /s // for now, meaning 1 will be taken.
C(fly,animal)2 C(fly,move)2 C(fly,animal)2 C(fly,move)2 C(fly,animal)2 C(fly,animal)2 C(fly,people)2 [[1034, 968], [1034, 971], [1034, 974], [1034, 978], [1034, 981], [1034, 991], [1034, 1034]]
       
       
       // Quantifiers, unique instance versus general

       
        /m  D(Q(all,%1),%1)p=1                           // this defines 'all' as general

        /m  D(F(%1,general),%1)p=1 			// this defines "general" to mean general

        /m  D(F(%1,R(in,general)),%1)p=1 		// this defines "in general" to mean general

        /m  D(F(Q(%2,%1),R(in,general)),%1)p=1 		// this defines "in general" to mean general for any Q()

        /m  D(F(Q(%2,%1),general),%1)p=1 		// this defines "general" to mean general for any Q()

        /m  D(F(Q(%2,%1),specific),%1)p=0		// this defines "specific" not meaning general 

        /m  C(F(Q(%2,%1),specific),%1)p=1		// this defines "specific" meaning an instance 

        /m  D(Q(some,%1),%1)p=0.5                        // this defines some as partially general

        /m  D(Q(all,%1),%1)p=1				// this defines all as general

        /m  D(Q(the,%1),F(Q(a,%1),specific))    // this concept will use the second meaning of 'the'

       // we already should have D(Q(the2,%1),%1)p=0  which means that the second meaning of 'the' is instance, not generalizing.

OK MORE /e  Are foxes smart?                   /m  F(fox,smart)?                 /a F(fox,smart)p=1 /s F(fox,smart)4 F(fox,smart)2 F(fox,smart)2 F(fox,smart)2 [[1037, 760], [1037, 761], [1037, 763], [1037, 765]]
***BADP /e  Is the fox smart?                  /m  F(Q(the,fox),smart)?          /a F(Q(the,fox),smart)p=1 /s F(Q(the,fox),smart)2 [[1042, 1042]]
        /e  Foxes are fast.                    /m F(fox,fast)
OK MORE /e  Are foxes fast?                    /m  F(fox,fast)?                  /a F(fox,fast)p=1 /s F(fox,fast)4 F(fox,fast)2 F(fox,fast)2 F(fox,fast)2 [[1054, 1045], [1054, 1046], [1054, 1048], [1054, 1050]]
OK      /e  Are foxes slow?                    /m  F(fox,slow)?                  /a F(fox,slow)p=0.5 /s F(fox,slow)2 [[1057, 1057]]
        /e  An animal is either fast or slow.   /m F(animal, XOR(fast,slow))
OK MORE /e  Are foxes fast?                    /m  F(fox,fast)?                  /a F(fox,fast)p=1 /s F(fox,fast)4 F(fox,fast)2 F(fox,fast)2 F(fox,fast)2 F(fox,fast)2 [[1085, 1045], [1085, 1046], [1085, 1048], [1085, 1050], [1085, 1054]]
***BADP /e  Are foxes slow?                    /m  F(fox,slow)?                  /a F(fox,slow)p=0 /s F(fox,slow)2 [[1088, 1057]]
        /e  The fox is slow.                   /m  F(Q(the,fox),slow)           // second meaning of 'the' used

        /e  If the fox is slow then the fox runs slowly.    /m IM(F(Q(the,fox),slow),F(A(Q(the,fox),run),slowly))
        /e  The fox runs slowly.               /m F(A(Q(the,fox),run),slowly)
        /e  If the fox runs slowly then the fox is slow.   /m IM(F(A(Q(the,fox),run),slowly),F(Q(the,fox),slow))
OK MORE /e  Are foxes fast?                    /m  F(fox,fast)?                  /a F(fox,fast)p=1 /s F(fox,fast)4 F(fox,fast)2 F(fox,fast)2 F(fox,fast)2 F(fox,fast)2 F(fox,fast)2 [[1129, 1045], [1129, 1046], [1129, 1048], [1129, 1050], [1129, 1054], [1129, 1085]]
***BADP /e  Are foxes slow?                    /m  F(fox,slow)?                  /a F(fox,slow)p=0 /s F(fox,slow)2 F(fox,slow)2 [[1132, 1057], [1132, 1088]]
***BADP /e  Is the fox fast?                   /m  F(Q(the,fox),fast)?           /a  F(Q(the,fox),fast)p=1    /s // first meaning of 'the' used
F(Q(the,fox),fast)2 [[1137, 1137]]
OK MORE /e  Is the fox slow?                   /m  F(Q(the,fox),slow)?           /a  F(Q(the,fox),slow)p=1    /s // second meaning of 'the' used
F(Q(the,fox),slow)4 F(Q(the,fox),slow)4 F(Q(the,fox),slow)2 [[1142, 1093], [1142, 1098], [1142, 1125]]
       // because we know the fox runs slowly, so we have 2 sources of the fox being slow, this will add likelihood.

       
       
       // %-rules for mean and may

       // explains mean

       // explains may

       
       
       // reasoning on necessary condition (N)

       
        /e  Mary eats muffins if Mary is hungry.		 /m N(A(Mary,I(eat,muffin)),F(Mary,hungry))
        /e  Mary is not hungry.				 /m F(Mary,hungry)p=0
***BADP /e  Does Mary eat muffins?			 /m  A(Mary,I(eat,muffin))?		 /a A(Mary,I(eat,muffin))p=0 /s A(Mary,I(eat,muffin))2 [[1159, 1147]]
        /e  Mary is hungry.				 /m F(Mary,hungry)p=1
OK      /e  Does Mary eat muffins?			 /m  A(Mary,I(eat,muffin))?		 /a A(Mary,I(eat,muffin))p=0.5 /s A(Mary,I(eat,muffin))2 A(Mary,I(eat,muffin))2 [[1181, 1147], [1181, 1159]]
       
       
       
       // Updating p-value based on multiple statements and various degrees of certainity and generality (some, most, approximately, ...)

       
       // Inductive reasoning, generalization (propagate knowledge from instances to general concept)

       
       // Unify word meaning

       
       // Understanding groups

       
       // Family example

       
       // Understanding child story, personalization, real and unreal

       
       // Understanding people talking, knowing, thinking, assuming, denying

       
       // Understanding goal, intention, ability, plan, ask, promise, obligation, permission etc

       
       // Understanding comparisons, more, less, earlier, later

       
       // Understanding time

OK      /e  When do foxes hunt?                /m  F(A(fox,hunt),T(?))       /a not found:F(A(fox,hunt),T(?)) /s 
        /e  "at dawn" means a time.            /m C(R(at,dawn),time)
        /e  If %1 is a time, then the time is %1.  /m IM(C(%1,time),T(%1))
***MISS /e  When do foxes hunt?                /m  F(A(fox,hunt),T(?))       /a F(A(fox,hunt),T(R(at,dawn))) /s 
       
       // Understanding space and movements

       
       // Updating relevance (r-values) of concepts: make unused concepts less relevant so that they dont become activated.

       
       // Activate concepts to determine limited range of reasoning.

       
       // Increased activation (elaboration) if understanding is too low.

       
       // Learn - partial copy of WM to KB.

       
       // Understanding numbers

       
       
