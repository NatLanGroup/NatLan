// Testing animals

m/ F(dummy)
m/ A(F(%1,%2,-ing),%2)p=inhibit
m/ A(F(F(%1,%2,-ing),%3,-ing),%2)p=inhibit
m/ F(X(F(%1,%2),%3),%2)p=inhibit
m/ F(X(F(%1,NOT(%2)),%3),NOT(%2))p=inhibit
m/ F(F(%1,%2),%2)p=inhibit
m/ F(F(%1,NOT(%2)),%2)p=inhibit
m/ F(F(%1,%2),NOT(%2))p=inhibit
m/ A(F(%1,%2,-ing),NOT(%2))p=inhibit
m/ A(X(F(%1,%2,-ing),%3),%2)p=inhibit

m/ AND(A(%1,%2),A(%1,NOT(%2)))p=question
// A(%1,NOT(%2))p=question

m/ IM(IM(%1,%2),%2)p=im
// IM(F(%1,%2),C(F(%1,%2),%1))p=pide1   // GIVES ERROR this should be hardwired in the code. Only necessary when C(F(%1,%2),%1) is reasoned (to fix p) or if C(%1,%3) is met.
m/ IM(A(F(%1,%2),%3),IM(F(%1,%2),A(%1,%3)))p=pide1
m/ IM(A(%1,NOT(%2)),A(%1,%2))p=pnot1
m/ IM(F(%1,NOT(%2)),F(%1,%2))p=pnot1
m/ IM(F(A(%1,%2),%3),IM(A(%1,%2),F(%1,%3)))p=pide1  
m/ IM(A(F(%1,%2,-ing),%3),IM(A(%1,%2),A(%1,%3)))p=pide1

e/ Animals live.  								m/ A(animal,live)   
e/ If something lives, then it is an animal.    m/ IM(A(%1,live),C(%1,animal))p=pos1 
e/ Elephants live. 								m/ A(elephant,live) 
m/ C(elephant,animal)?							a/ C(elephant,animal).p=4

e/ A dead animal does not live.                 m/ A(F(animal,dead),NOT(live))
e/ An animal not living is dead.                m/  F(A(animal,NOT(live)),dead)
m/ C(dog,animal)
m/ F(dog,dead)
m/ A(dog,live)?									a/ A(dog,live).p=0
e/ An animal that lives is not dead.            m/ F(A(animal,live),NOT(dead))
e/ An animal that is not dead lives.            m/ A(F(animal,NOT(dead)),live) 

e/ Living animals move.                         m/  A(F(animal,live,-ing),move) 
e/ Moving animals live.                         m/  A(F(animal,move,-ing),live)
m/ A(bat,move)
m/ A(bat,live)?									a/ A(bat,live).p=2
m/ C(bat,animal)
m/ A(bat,live)?									a/ A(bat,live).p=4
e/ Dead animals do not move.                    m/ A(F(animal,dead),NOT(move))
// IM(F(dog,big),A(dog,move)) 

// 18482 attempted 63 reasoned  7 sec

m/ A(dog,move)?									a/ A(dog,move).p=0
// A(pit,dead)?					// A(pit,dead).p=2

//   ACTIV (ADD) KB new activated={77, 49, 51, 52, 53, 85} db=-1 85 move



 










